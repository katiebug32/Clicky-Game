{"version":3,"sources":["components/KittenCard/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/Navbar/index.js","components/KittyContainer/index.js","App.js","index.js"],"names":["KittenCard","props","react_default","a","createElement","className","onClick","id","src","image","alt","Wrapper","children","Jumbotron","Navbar","topScore","comment","currentScore","KittyContainer","App","state","kittens","kittensShuffled","highScore","clickedKittens","shuffleImgs","_this","i","length","j","Math","floor","random","_ref","setState","kittyClicked","console","log","clickFlag","newClickedKittens","push","newScore","newHighScore","_this2","this","components_Wrapper","components_Jumbotron","components_Navbar","components_KittyContainer","map","components_KittenCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9b2545f4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction KittenCard(props) {\n  return (\n    <div className=\"card\" onClick={props.onClick}>\n      <img id={props.id} src={props.image} className=\"card-img-top\" alt={props.id} >\n      </img>\n      </div>\n      );\n    }\n    \n    export default KittenCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n    <div className=\"container\">\n      <h1 className=\"display-4\">Clicky Kitten Game!</h1>\n      <p className=\"lead\">Click on a kitten to earn a point, but don't click on the same kitten twice!</p>\n    </div>\n  </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg\">\n      <ul>\n        <li className=\"topScore\">Top Score: {props.topScore}</li>\n        <li className=\"comment\">{props.comment}</li>\n        <li className=\"currentScore\">Current Score: {props.currentScore}</li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction KittyContainer(props) {\n  return <div className=\"kittyContainer\">{props.children}</div>;\n}\n\nexport default KittyContainer;","import React, { Component } from \"react\";\nimport KittenCard from \"./components/KittenCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport kittens from \"./kittens.json\";\nimport Navbar from \"./components/Navbar\";\nimport KittyContainer from \"./components/KittyContainer\";\n\n\n\n\nclass App extends Component {\n  // Setting this.state.kittens to the kittens json array\n  state = {\n    kittens,\n    kittensShuffled: [],\n    currentScore: 0,\n    highScore: 0,\n    clickedKittens: [],\n    comment: \"Click an image to begin!\"\n  };\n\n\n  shuffleImgs = id => {\n    let kittensShuffled = this.state.kittens;\n    for (let i = kittensShuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [kittensShuffled[i], kittensShuffled[j]] = [kittensShuffled[j], kittensShuffled[i]];\n    }\n    this.setState({\n      kittensShuffled\n    })\n  }\n\n  kittyClicked = id => {\n    console.log(id, \"Image is clicked!\")\n    let clickFlag = false;\n    //when img is clicked, check if id is in clickedKittens array\n    for (let i = 0; i < this.state.clickedKittens.length; i++) {\n      if (id === this.state.clickedKittens[i]) {\n        console.log(\"IF is true\");\n        clickFlag = true; //set a flag to differentiate which state changes to make\n      }\n    }\n        \n    if(clickFlag) {\n        // - if id already clicked, setState of comment to \"Wrong guess! Play again?\", setState of currentScore to 0, empty array\n      this.setState({\n          comment: \"Oops, game over! Click to play again!\",\n          currentScore: 0,\n          clickedKittens: []\n        })\n    } else {\n    // - if not, push id to clickedKittens, setState currentScore to currentScore + 1, shuffle image cards (do this in render, not here), setState of comment to \"Good Job, keep guessing!\"\n        \n    //throw the current state into a new variable so state can change values and thus update\n        const newClickedKittens = this.state.clickedKittens;\n        newClickedKittens.push(id);\n    //throw the current state into a new variable so state can change values and thus update\n        const newScore = this.state.currentScore +1;\n        let newHighScore = this.state.highScore;\n\n    //if the current score beats the previous highest score, then update to the new highest score\n        if(newScore > this.state.highScore) {\n           newHighScore = newScore;\n        }\n        this.setState({\n          clickedKittens: newClickedKittens,\n          currentScore: newScore,\n          highScore: newHighScore,\n          comment: \"Good job, keep guessing!\"\n        })\n        this.shuffleImgs(); //only shuffle the images when the game is still in play\n      }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron>Kitten Clicky Game</Jumbotron>\n        <Navbar\n          comment={this.state.comment}\n          currentScore={this.state.currentScore}\n          topScore={this.state.highScore}\n        />\n        <KittyContainer>\n          {this.state.kittens.map(kittens => (\n            <KittenCard\n              id={kittens.id}\n              key={kittens.id}\n              image={kittens.image}\n              onClick={() => { this.kittyClicked(kittens.id) }}\n            />\n          ))}\n        </KittyContainer>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}